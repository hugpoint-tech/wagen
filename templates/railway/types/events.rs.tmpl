#[allow(dead_code)]

use crate::types::Fixed;
use crate::types::enums;

{%- for interface in protocol.interfaces %}

{%- for req in interface.requests %}
{%- for arg in req.args %}
{%- if arg.arg_type == "new_id" and arg.interface == "wl_callback" %}
/// Callback event
#[derive(Debug)]
pub struct {{ interface.name ~ "_" ~ req.name |to_pascal }}DoneEvent{
    /// id of the object the event came from
    pub source_id: u32,
    /// event specific data
    pub data: u32,
}
{% break %}
{%- endif  %}
{%- endfor %}
{%- endfor %}

{%- for event in interface.events %}
{%- for line in event.description %}
///{{" " ~ line | trim_end }}
{%- endfor %}
#[derive(Debug)]
pub struct {{ interface.name ~ "_" ~ event.name | to_pascal }}Event {
    /// {{ interface.name ~ ":" ~ event.name }} event
    /// id of the object the event came from
    pub source_id: u32,
    {%- for arg in event.args %}
    {%- if arg.summary %}
    /// {{ arg.summary }}
    {%- endif %}
    {%- if arg.description %}
    {%- for line in arg.description %}
    ///{{" " ~ line | trim_end }}
    {%- endfor %}
    {%- endif %}
    {%- if arg.arg_type == "int"%}
    {%- if arg.enum_type and arg.enum_type is containing(".") %}
    pub {{ arg.name }}: enums::{{ arg.enum_type | replace(from=".", to="_")| to_pascal }},
    {%- elif arg.enum_type and not arg.enum_type is containing(".") %}
    pub {{ arg.name }}: enums::{{ interface.name ~ "_" ~ arg.enum_type | to_pascal }},
    {%- else %}
    pub {{ arg.name }}: i32,
    {%- endif %}
    {%- elif arg.arg_type == "uint"%}
    {%- if arg.enum_type and arg.enum_type is containing(".") %}
    pub {{ arg.name }}: enums::{{ arg.enum_type | replace(from=".", to="_")| to_pascal }},
    {%- elif arg.enum_type and not arg.enum_type is containing(".") %}
    pub {{ arg.name }}: enums::{{ interface.name ~ "_" ~ arg.enum_type | to_pascal }},
    {%- else %}
    pub {{ arg.name }}: u32,
    {%- endif %}
    {%- elif arg.arg_type == "string"%}
    pub {{ arg.name }}: String,
    {%- elif arg.arg_type == "fd"%}
    pub {{ arg.name }}: std::os::fd::RawFd,
    {%- elif arg.arg_type == "object"%}
    pub {{ arg.name }}: u32,
    {%- elif arg.arg_type == "fixed"%}
    pub {{ arg.name }}: Fixed,
    {%- elif arg.arg_type == "array"%}
    pub {{ arg.name }}: Vec<u8>,
    {%- elif arg.arg_type == "new_id"%}
    // new_id
    pub {{ arg.name }}: u32,
    {%- endif %}
    {%- endfor %}
}
{% endfor %}
{%- endfor %}
