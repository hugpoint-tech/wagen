use std::ops::{BitAnd, BitOr, BitOrAssign};
#[allow(dead_code)]
{%- for interface in protocol.interfaces %}
{%- for enum in interface.enums %}

/// {{ interface.name}}:{{enum.name}} enum
{%- if enum.description %}
{%- for line in enum.description %}
///{{" " ~ line | trim_end }}
{%- endfor %}
{%- endif %}
{%- if enum.bitfield %}
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct {{ interface.name ~ "_" ~ enum.name | to_pascal }} {
    value: u32,
}

impl From<u32> for {{ interface.name ~ "_" ~ enum.name | to_pascal }} {
    fn from(value: u32) -> Self {
        Self { value }
    }
}

impl {{ interface.name ~ "_" ~ enum.name | to_pascal }} {
{%- for entry in enum.entries %}
{%- if entry.summary %}
    /// {{ entry.summary }}
{%- endif %}
    pub const {{ entry.name | to_pascal | upper }}:Self = {{ interface.name ~ "_" ~ enum.name | to_pascal }}{ value: {{ entry.value }} };
{%- endfor %}

    pub fn new() -> Self {
        {{ interface.name ~ "_" ~ enum.name | to_pascal }} { value: 0 }
    }

    pub fn contains(&self, flag: Self) -> bool {
        self.value & flag.value != 0
    }

    pub fn insert(&mut self, flag: Self) {
        self.value |= flag.value;
    }

    pub fn remove(&mut self, flag: Self) {
        self.value &= !flag.value;
    }
}

impl BitAnd for {{ interface.name ~ "_" ~ enum.name | to_pascal }} {
    type Output = Self;

    fn bitand(self, rhs: Self) -> Self::Output {
        Self {
            value: self.value & rhs.value,
        }
    }
}

impl BitOr for {{ interface.name ~ "_" ~ enum.name | to_pascal }} {
    type Output = Self;

    fn bitor(self, rhs: Self) -> Self::Output {
        Self {
            value: self.value | rhs.value,
        }
    }
}

impl BitOrAssign for {{ interface.name ~ "_" ~ enum.name | to_pascal }} {
    fn bitor_assign(&mut self, rhs: Self) {
        self.value |= rhs.value;
    }
}
{%- else %}
#[repr(u32)]
#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum {{ interface.name ~ "_" ~ enum.name | to_pascal }} {
{%- for entry in enum.entries %}
{%- if entry.summary %}
    /// {{ entry.summary }}
{%- endif %}
{%- if enum.name == "transform" %}
    {{ "transform" ~ "_"~ entry.name | to_pascal }} = {{ entry.value }}u32,
{%- elif enum.name == "format" %}
    {{ entry.name | upper }} = {{ entry.value }}u32,
{%- else %}
    {{ entry.name | to_pascal }} = {{ entry.value }}u32,
{%- endif %}
{%- endfor %}
    /// Unexpected value was receieved on the wire
    Unexpected,
}

impl From<u32> for {{ interface.name ~ "_" ~ enum.name | to_pascal }} {
    fn from(value: u32) -> Self {
        match value {
{%- for entry in enum.entries %}
{%- if enum.name == "transform" %}
            {{ entry.value }} => Self::{{ "transform" ~ "_"~ entry.name | to_pascal }},
{%- elif enum.name == "format" %}
            {{ entry.value }} => Self::{{ entry.name | upper }},
{%- else %}
            {{ entry.value }} => Self::{{ entry.name | to_pascal }},
{%- endif %}
{%- endfor %}
            _ => Self::Unexpected,
        }
    }
}
{%- endif %}
{%- endfor %}
{%- endfor %}
