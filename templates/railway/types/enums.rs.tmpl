// !!! THIS FILE IS GENERATED WITH WAGEN !!!
// !!! DO NOT MODIFY THIS FILE MANUALLY, EDIT TEMPLATE INSTEAD !!!
use std::ops::{BitAnd, BitOr, BitOrAssign};
#[allow(dead_code)]
{{- range $protocol := . }}

{{- range $interface := $protocol.Interfaces }}
{{- range $enum := $interface.Enums }}

/// {{ $interface.Name}}:{{ $enum.Name }} enum
{{- if $enum.Description }}
{{- range $line := ToLines $enum.Description }}
/// {{ Trim $line }}
{{- end }}
{{- end }}
{{- if $enum.Bitfield }}
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct {{ ToPascal $interface.Name $enum.Name }} {
    value: u32,
}

impl From<u32> for {{ ToPascal $interface.Name $enum.Name }} {
    fn from(value: u32) -> Self {
        Self { value }
    }
}

impl {{ ToPascal $interface.Name $enum.Name }} {
{{- range $entry := $enum.Entries }}
{{- if $entry.Summary }}
    /// {{ $entry.Summary }}
{{- end }}
    pub const {{ Upper (ToPascal $entry.Name) }}:Self = {{ ToPascal $interface.Name $enum.Name }}{ value: {{ $entry.Value }} };
{{- end }}

    pub fn new() -> Self {
        {{ ToPascal $interface.Name $enum.Name }} { value: 0 }
    }

    pub fn contains(&self, flag: Self) -> bool {
        self.value & flag.value != 0
    }

    pub fn insert(&mut self, flag: Self) {
        self.value |= flag.value;
    }

    pub fn remove(&mut self, flag: Self) {
        self.value &= !flag.value;
    }
}

impl BitAnd for {{ ToPascal $interface.Name $enum.Name }} {
    type Output = Self;

    fn bitand(self, rhs: Self) -> Self::Output {
        Self {
            value: self.value & rhs.value,
        }
    }
}

impl BitOr for {{ ToPascal $interface.Name $enum.Name }} {
    type Output = Self;

    fn bitor(self, rhs: Self) -> Self::Output {
        Self {
            value: self.value | rhs.value,
        }
    }
}

impl BitOrAssign for {{ ToPascal $interface.Name $enum.Name }} {
    fn bitor_assign(&mut self, rhs: Self) {
        self.value |= rhs.value;
    }
}
{{- else }}
#[repr(u32)]
#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum {{ ToPascal $interface.Name $enum.Name }} {
{{- range $entry := $enum.Entries }}
{{- if $entry.Summary }}
    /// {{ $entry.Summary }}
{{- end }}
{{- if eq $enum.Name "transform" }}
    {{ ToPascal "transform" $entry.Name }} = {{ $entry.Value }}u32,
{{- else }}{{- if eq $enum.Name "format" }}
    {{ Upper $entry.Name }} = {{ $entry.Value }}u32,
{{- else }}
    {{ ToPascal $entry.Name }} = {{ $entry.Value }}u32,
{{- end }}
{{- end }}
{{- end }}
    /// Unexpected value was receieved on the wire
    Unexpected,
}

impl From<u32> for {{ ToPascal $interface.Name $enum.Name }} {
    fn from(value: u32) -> Self {
        match value {
{{- range $entry := $enum.Entries }}
{{- if eq $enum.Name "transform" }}
            {{ $entry.Value }} => Self::{{ ToPascal "transform" $entry.Name }},
{{- else }}{{- if eq $enum.Name "format" }}
            {{ $entry.Value }} => Self::{{ Upper $entry.Name }},
{{- else }}
            {{ $entry.Value }} => Self::{{ ToPascal $entry.Name }},
{{- end }}
{{- end }}
{{- end }}
            _ => Self::Unexpected,
        }
    }
}
{{- end }}

{{- end }}
{{- end }}
{{- end }}
