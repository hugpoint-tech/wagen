// !!! THIS FILE IS GENERATED WITH WAGEN !!!
// !!! DO NOT MODIFY THIS FILE MANUALLY, EDIT TEMPLATE INSTEAD !!!
use crate::connection::WaylandConnection;
use crate::connection::WaylandConnectionPrivate;
use crate::types::Fixed;
use crate::types::events::*;
use crate::types::handler::EventHandler;
use crate::types::object::Object;

impl WaylandConnectionPrivate {

    pub(crate) fn dispatch_event<T: EventHandler>(&mut self, c: &WaylandConnection, state: &mut T) {
        if self.recv_pos >= self.recv_buf.len() {
            return
        }

        let hdr = self.get_header();
        let id =  hdr.obj_id;
        let op = hdr.opcode;
        let obj = self.objects[id as usize];

        match obj {
            Object::Null => panic!("object of type null was sent by the server"),
{{- range $protocol := . }}
    {{- range $interface := $protocol.Interfaces }}
        {{- range $req := $interface.Requests }}
        {{- range $arg := $req.Args }}
        {{- if and (eq $arg.Type "new_id") (eq $arg.Interface "wl_callback") }}
            Object::{{ ToPascal $interface.Name $req.Name }}Callback => {
                match op {
                    0 =>{
                        let event = {{ ToPascal $interface.Name $req.Name }}DoneEvent {
                                source_id: id,
                                data: self.get_uint(),
                        };
                        println!("dispatch: event {:?}", event);
                        state.on_{{ $interface.Name}}_{{ $req.Name }}_done(event, c);
                    },
                    _ => ()
                }
            },
        {{ break }}
        {{- end  }}
        {{- end }}
        {{- end }}

        {{- if eq $interface.Name "wl_callback" }}
        {{- continue }}
        {{- end  }}
        {{- if $interface.Events }}
            Object::{{ ToPascal $interface.Name }} => {
                match op {
                {{- range $event := $interface.Events }}
                    {{ $event.Opcode }} =>{
                        let event = {{ ToPascal $interface.Name $event.Name }}Event {
                            source_id: id,
                            {{- range $arg := $event.Args }}
                            {{- if eq $arg.Type "int"}}
                            {{- if $arg.Enum }}
                            {{ $arg.Name }}: (self.get_int() as u32).into(),
                            {{- else }}
                            {{ $arg.Name }}: self.get_int(),
                            {{- end }}
                            {{- end }}{{- if eq $arg.Type  "uint"}}
                            {{- if $arg.Enum }}
                            {{ $arg.Name }}: self.get_uint().into(),
                            {{- else }}
                            {{ $arg.Name }}: self.get_uint(),
                            {{- end }}
                            {{- end }}{{- if eq $arg.Type  "string"}}
                            {{ $arg.Name }}: self.get_str(),
                            {{- end }}{{- if eq $arg.Type  "fd"}}
                            {{ $arg.Name }}: self.get_fd(),
                            {{- end }}{{- if eq $arg.Type  "object"}}
                            {{ $arg.Name }}: self.get_uint(),
                            {{- end }}{{- if eq $arg.Type  "fixed"}}
                            {{ $arg.Name }}: Fixed::new(self.get_uint()),
                            {{- end }}{{- if eq $arg.Type  "array"}}
                            {{ $arg.Name }}: self.get_vec(),
                            {{- end }}{{- if eq $arg.Type  "new_id"}}
                            // new_id
                            {{ $arg.Name }}: self.get_uint(),
                            {{- end }}
                            {{- end }}
                        };
                        println!("dispatch: event {:?}", event);
                        state.on_{{ $interface.Name }}_{{ $event.Name }}(event, c);
                    },
        {{- end }}
                    _ => (),
                }
            },
        {{- else }}
            Object::{{ ToPascal $interface.Name }} => panic!("event from object with no events"),
        {{- end }}
    {{- end }}
{{- end }}
        }
    }
}
