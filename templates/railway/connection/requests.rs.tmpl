// !!! THIS FILE IS GENERATED WITH WAGEN !!!
// !!! DO NOT MODIFY THIS FILE MANUALLY, EDIT TEMPLATE INSTEAD !!!
use crate::types::Request;
use crate::types::Object;
use crate::types::MessageHeader;
use crate::connection::WaylandConnection;
use crate::types::Request::*;

impl WaylandConnection {

pub fn enqueue(&self, req: Request) -> u32 {
        let data =  unsafe { &mut *self.data.get() };
        // Used as a return value, not all requests generate a new_id,
        // according to the spec 0 ID is reserved to represent a null or non-existent object.
        let mut new_id: u32 = 0;

        match req {
{{- range $protocol := . }}
    {{- range $interface := $protocol.Interfaces }}
        {{- range $request := $interface.Requests }}
            // {{ $interface.Name }}:{{ $request.Name }}
            {{ ToPascal $interface.Name $request.Name }}{sendto
           {{- range $arg := $request.Args -}}
            {{- if eq $arg.Type "new_id" -}}
            {{- if not $arg.Interface -}}
            ,if_name,if_version
            {{- end -}}
            {{- else -}}
            ,{{ $arg.Name }}
            {{- end -}}
            {{- end -}} } => {
                {{- range $arg := $request.Args }}
                {{- if and (and (eq $arg.Type "new_id") $arg.Interface) (eq $arg.Interface "wl_callback") }}
                new_id = data.allocate_id(Object::{{ ToPascal $interface.Name $request.Name}}Callback);
                {{- end }}
                {{- if and (and (eq $arg.Type "new_id") $arg.Interface) (not (eq $arg.Interface "wl_callback")) }}
                new_id = data.allocate_id(Object::{{ ToPascal $arg.Interface}});
                {{- end }}
                {{- if and (eq $arg.Type "new_id") (not $arg.Interface) }}
                let kind = Object::from_str(&if_name).unwrap();
                new_id = data.allocate_id(kind);
                {{- end }}
                {{- end }}
                let hdr_pos = data.send_buf.len();
                data.send_buf.set_len(hdr_pos + 8);
                {{- range $arg := $request.Args }}
                {{- if eq $arg.Type "int"}}
                data.write_int({{ $arg.Name }});
				{{- end }}
                {{- if eq $arg.Type "uint"}}
                data.write_uint({{ $arg.Name }});
				{{- end }}
                {{- if eq $arg.Type "string"}}
                data.write_string({{$arg.Name}});
				{{- end }}
                {{- if eq $arg.Type "fd"}}
                data.write_fd({{$arg.Name}});
				{{- end }}
                {{- if eq $arg.Type "object"}}
                data.write_uint({{ $arg.Name }});
				{{- end }}
                {{- if eq $arg.Type "fixed"}}
                // data.write_uint({{ $arg.Name }}.0);
				{{- end }}
                {{- if eq $arg.Type "array"}}
                data.write_array({{ $arg.Name }});
				{{- end }}
                {{- if eq $arg.Type "new_id"}}
                {{- if $arg.Interface }}
                data.write_uint(new_id);
                {{- else }}
                data.write_string(if_name);
                data.write_uint(if_version);
                data.write_uint(new_id);
                {{- end }}
                {{- end }}
                {{- end }}
                let hdr = MessageHeader {
                    obj_id: sendto,
                    opcode: {{$request.Opcode}}u16,
                    len: (data.send_buf.len() - hdr_pos) as u16
                };
                data.write_header(hdr, hdr_pos);
            },
        {{- end }}
    {{- end }}
{{- end }}
        }
        return new_id
    }

}
